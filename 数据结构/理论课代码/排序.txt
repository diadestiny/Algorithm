冒泡:
void sort_array(int *arr, int n)
//  编程实现《冒泡排序算法》：将乱序序列arr转化为升序序列
//  函数参数：乱序整数数组arr 数组长度
//  要求输出：调用print_array(int *arr, int n)输出前三次冒泡操作后的序列，以及最终的升序序列
{
    // 请在这里补充代码，完成本关任务
    /********** Begin *********/
    for(int i=0;i<n-1;i++){
		for(int j=0;j<n-i-1;j++){
			if(arr[j]>arr[j+1]){
				int temp=arr[j];
				arr[j]=arr[j+1];
				arr[j+1]=temp;
			}
		}
		if(i<=2){
		print_array(arr,n);
		}
	}
	print_array(arr,n);
    
    /********** End **********/
}
选择:
void sort_array(int *a, int n)
//  编程实现《选择排序算法》：将乱序序列arr转化为升序序列
//  函数参数：乱序整数数组（无重复元素） 数组长度
//  要求输出：调用print_array(int *arr, int n)输出前三次选择操作后的序列，以及最终的升序序列
{
    // 请在这里补充代码，完成本关任务
    /********** Begin *********/
    for(int i=0;i<n;i++){
		int temp=a[i];
		int flag;
		for(int j=i;j<n;j++){
			if(a[j]<temp){
				temp=a[j];
				flag=j;
			}
		}
		if(temp!=a[i]){
			a[flag]=a[i];
			a[i]=temp;
		}
		if(i<3){
			print_array(a,n);
		}
	}
		print_array(a,n);
    
    /********** End **********/
}
<<<<<<< HEAD
插入:
void sort_array(int *arr, int n)
//  编程实现《插入排序算法》：将乱序序列arr转化为升序序列
//  函数参数：乱序整数数组（无重复元素） 数组长度
//  要求输出：调用print_array(int *arr, int n)输出前三次插入操作后的序列，以及最终的升序序列
{
    // 请在这里补充代码，完成本关任务
    /********** Begin *********/
    for(int i=1;i<n;i++){
		int temp = arr[i];
		int j;
		for(j=i-1;j>=0;j--){
			if(arr[j]>temp){
				arr[j+1]=arr[j];
			}else{
				break;
			}
		}
		arr[j+1] =temp;
		if(i<=3)
		print_array(arr,n);
		
	}
	 print_array(arr,n);
    /********** End **********/
}
shell:
void sort_array(int *arr, int n)
//  编程实现《希尔排序算法》：将乱序序列arr转化为升序序列
//  函数参数：乱序整数数组 数组长度
//  要求输出：调用print_array(int *arr, int n)输出三遍增量排序操作后的序列，以及最终的升序序列
{
    // 请在这里补充代码，完成本关任务
    /********** Begin *********/
	int temp;
	int dd=0;
    for(int gap = n/2;gap>0;gap/=2){
		for(int i=0;i<n;i++){
			temp = arr[i];
			int j ;
			for(j = i-gap;j>=0;j-=gap){
				if(arr[j]>temp){
					arr[j+gap] = arr[j];
				}else{
					break;
				}
			}
			arr[j+gap]=temp;
		}
		if(dd!=3){
			dd++;
			print_array(arr,n);
		}
		
	}

    print_array(arr,n);
    /********** End **********/
}
归并:
int* merge_array(int *arr1, int n1, int* arr2, int n2)
//  编程实现两个有序数组arr1和arr2合并
//  函数参数：有序数组arr1 数组arr1长度 有序数组arr2 数组arr2长度
//  函数返回值：返回从小到大排序后的合并数组
{
    // 请在这里补充代码，完成本关任务
    /********** Begin *********/
 int* arr = (int*)malloc(sizeof(int)*(n1+n2));
    int p = 0;
    int p1 = 0;
    int p2 = 0;
    while (p1<n1 || p2<n2) {
        if(p1<n1 && p2<n2){
            // 自上而下的递归方法使得这两个数组各自是有序的
            // 选择两个数组较小的给arr
            if (arr1[p1]<arr2[p2]) {
                arr[p++] = arr1[p1++];
            }else{
                arr[p++] = arr2[p2++];
            }
        }else if(p1<n1){
            // arr2排完了，余下arr1
            arr[p++] = arr1[p1++];
        }else if(p2<n2){
            // arr1排完了，余下arr2
            arr[p++] = arr2[p2++];
        }
    }
    return arr;
    /********** End **********/
}
int* merge_sort(int *arr, int n)
//  基于merge_array函数编程实现归并排序：自上而下的递归方法
//  函数参数：有序数组arr 数组arr长度
//  函数返回值：返回从小到大排序后的数组
{
    // 请在这里补充代码，完成本关任务
    /********** Begin *********/
  if(n==1){
        return arr;
    }
    int m = n/2;
    int* arr1 = (int*)malloc(sizeof(int)*(m));
    int* arr2 = (int*)malloc(sizeof(int)*(n-m));
    for (int i=0, j=0; i<m; i++, j++) {
        // 左半边数组给arr1
        arr1[j] = arr[i];
    }
    for (int i=m, j=0; i<n; i++, j++) {
        // 右半边数组给arr2
        arr2[j] = arr[i];
    }
    // 递归子数组
    arr1 = merge_sort(arr1, m);
    arr2 = merge_sort(arr2, n-m);
    // 合并子数组
    return merge_array(arr1, m, arr2, n-m);
    /********** End **********/
}

int partition_array(int *arr ,int l,int r)
// 编程实现arr[l, r]分区：选定一个基准，左边比基准小，右边比基准大
// 返回基准所处位置
{
    // 请在这里补充代码，完成本关任务
    /********** Begin *********/
    int i=l+1;int j=r;
	int temp  =arr[l];
	while(i<=j){
		while(arr[i]<temp){
			i++;
		}
		while(arr[j]>temp){
			j--;
		}if(i<j){
			int tt=arr[i];
			arr[i]=arr[j];
			arr[j]=tt;
			i++;
			j--;
		}
		else{
			i++;
		}
	}
	int tt = arr[j];
	arr[j]=arr[l];
	arr[l]=tt;
	return j;
    /********** End **********/
}

int* quick_sort(int arr[], int left, int right)
{
	if (left > right)
		return NULL;
	int j = partition_array(arr, left, right);
	quick_sort(arr, left, j - 1);
	quick_sort(arr, j + 1, right);
	return arr;
}


void adjustHeap(int *arr, int len, int index)
// 编程实现堆的调整
{
    // 请在这里补充代码，完成本关任务
    /********** Begin *********/
    int left = 2 * index + 1;  // index的左子节点
    int right = 2 * index + 2; // index的右子节点

    int maxIdx = index;
    if (left < len && arr[left] > arr[maxIdx])
        maxIdx = left;
    if (right < len && arr[right] > arr[maxIdx])
        maxIdx = right;

    if (maxIdx != index)
    {
        swap(arr[maxIdx], arr[index]);
        adjustHeap(arr, len, maxIdx);
    }
    /********** End **********/
}

int* heap_sort(int *arr, int size)
//  基于adjustHeap函数编程实现堆排序
//  函数参数：无序数组arr 数组长度n
//  函数返回值：返回从小到大排序后的数组
{
     for (int i = size / 2 - 1; i >= 0; i--)
    {
        adjustHeap(arr, size, i);
    }

    // 调整大根堆
    for (int i = size - 1; i >= 1; i--)
    {
        swap(arr[0], arr[i]); // 将当前最大的放置到数组末尾
        adjustHeap(arr, i, 0);    // 将未完成排序的部分继续进行堆排序
    }
	return arr;
}

int* sort_array(int *arr, int n)
//  编程实现《基数排序算法》
//  函数参数：乱序整数数组 数组长度
//  函数返回值：返回从小到大排序后的数组
{   
    // 请在这里补充代码，完成本关任务
    /********** Begin *********/
    int i;
    int maxValue = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] > maxValue) {
            maxValue = arr[i]; 
            // 输入数据的最大值
        }
    }
    const int radixCnt = 10;
    vector<int> radixs[radixCnt];
    int maxDigit = 0;
    while (maxValue) {
        maxValue /= 10;
        maxDigit++;
    }
    for (int i=0, dev=1; i<maxDigit; i++, dev*=10) {
        for (int j=0; j<radixCnt; j++) {
            radixs[j].clear();
        }   
        for (int j=0; j<n; j++) {
            int digit = (arr[j]/dev)%10;
            radixs[digit].push_back(arr[j]);
        }   
        for (int j=0, t=0; j<radixCnt; j++) {
            for (int k=0; k<int(radixs[j].size()); k++) {
                arr[t++] = radixs[j][k];
            }   
        }   
    }   
    return arr;
    /********** End **********/
}   
}

int* sort_array(int *arr, int n)
//  编程实现《桶排序算法》
//  函数参数：乱序整数数组 数组长度
//  函数返回值：返回从小到大排序后的数组
{
    // 请在这里补充代码，完成本关任务
    /********** Begin *********/
    int *t=new int[100];
	int k=0;
    for(int i=0;i<=n;i++){
		t[i]=0;
	}
	for(int i=0;i<n;i++){
		++t[arr[i]];
	}
	for(int i=0;i<=100;i++){
		for(int j=1;j<=t[i];j++){
			arr[k++]=i;
		}
	}
	return arr;
    /********** End **********/
}

//计数排序
void sort_array(int *arr, int n)
//  编程实现《计数排序算法》
//  函数参数：乱序整数数组 数组长度
//  要求输出：调用print_array(int *arr, int n)输出：
//  每一行一个元素及其个数（升序），如 1 1
//  以及最终的升序序列
{
    int maxVal = arr[0];
    for (int i=1; i<n; i++) {
        if(maxVal<arr[i]){
            maxVal = arr[i];
        }
    }
    // 申请计数数组，并初始化为0
    int* cnt = (int*)malloc(sizeof(int)*(maxVal+1));
    for (int i=0; i<=maxVal; i++) {
        cnt[i] = 0;
    }
    // 对arr数组元素计数
    for (int i=0; i<n; i++) {
        cnt[arr[i]]++;
    }
    // 顺序输出计数结果
    for (int i=0, k=0; i<=maxVal; i++){
        if (cnt[i]) {
            printf("%d %d\n", i, cnt[i]);
        }
        for (int j=0; j<cnt[i]; j++) {
            arr[k++] = i;
        }
    }
    print_array(arr, n);
    /********** End **********/
}
=======

>>>>>>> dcc8936069233363b0115b8171d82f38237eb487
