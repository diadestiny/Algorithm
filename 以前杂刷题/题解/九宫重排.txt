#include <stdio.h>
#include<iostream>
#include<string>
#include<set>
#include<queue>
#include<cstring>

using namespace std;

class node
{
public:
	node(int x, int y,int step)
	{
		this->x = x;
		this->y = y;
		this->step = step;

	}
	int getx()
	{
		return this->x;
	}
	int gety()
	{
		return this->y;
	}
	int getstep()
	{
		return this->step;
	}
	char cur_pic[3][3];
private:

	int x, y,step;//step 步数
	//x y 表示空格的位置
};
set<int> st;
queue<node> q;
char mp[3][3], gp[3][3];
const int dx[] = { -1, 1, 0, 0 };
const int dy[] = { 0, 0, -1, 1 };

bool check(node cur)
{
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			if (cur.cur_pic[i][j] != gp[i][j])
				return false;
		}
	}
	return true;
}
int yingshe(node cur)
{
	int res = 0;
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			if (cur.cur_pic[i][j] != '.')
				res = res * 10 + (cur.cur_pic[i][j] - '0');
			else
				res = res * 10 + 9;
		}
	}
	return res;
}
void bfs()
{
	st.clear();
	if (!q.empty())
		st.insert(yingshe(q.front()));
	while (!q.empty())
	{
		node cur = q.front();
		q.pop();
		if (check(cur)) {
			cout << cur.getstep() << endl;
			return;
		}
		for (int i = 0; i < 4; i++)
		{
			int newx =  cur.getx() + dx[i];
			int newy =  cur.gety() + dy[i];
			if (newx >= 0 && newx < 3 && newy >= 0 && newy < 3)
			{
				node newcur (newx, newy, cur.getstep() + 1);
				memcpy(newcur.cur_pic, cur.cur_pic, sizeof(cur.cur_pic));
				char temp = newcur.cur_pic[newx][newy];
				newcur.cur_pic[newx][newy] = '.';
				newcur.cur_pic[cur.getx()][cur.gety()] = temp;
				int val = yingshe(newcur);
				if (st.find(val) != st.end())
					continue;//跳过重复的图
				st.insert(val);
				q.push(newcur);

			}
		}

	}
	cout << -1 ;

}
int main()
{
	string s1, s2;
	cin >> s1 >> s2;

	while (!q.empty())
		q.pop();
	int bx = 0, by = 0;
	int len = 0;
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			mp[i][j] = s1[len++];
			if (mp[i][j] == '.')
			{
				bx = i;
				by = j;
			}
		}
	}
	node cur =node(bx, by, 0);
	memcpy(cur.cur_pic, mp, sizeof(mp));
	q.push(cur);
	len = 0;
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			gp[i][j] = s2[len++];
			if (gp[i][j] == '.')
			{
				bx = i;
				by = j;
			}
		}
	}

	bfs();
	return 0;
}